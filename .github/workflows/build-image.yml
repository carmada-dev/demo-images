
name: FACTORY

run-name: 'Building ${{ inputs.imageName }} (${{ inputs.imageVersion}})'

on:
  workflow_dispatch:
    inputs:
      imageName:
        type: string
        required: true
      imageVersion:
        type: string
        required: true

concurrency:
  group: '${{ github.ref }}-${{ github.event.inputs.imageName }}'
  cancel-in-progress: true

jobs:
  build:
    if: ${{ (github.event.sender.type == 'Bot') }}
    runs-on: ubuntu-latest

    defaults:
      run:
        shell: bash
        working-directory: ${{ format('./{0}', inputs.imageName) }}

    steps:

      - uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Download Source
        uses: actions/checkout@v4

      - name: Setup Packer
        uses: hashicorp/setup-packer@main
        with:
          version: "latest"
  
      - name: Init Packer
        run: packer init ../_packer/
  
      - name: Resolve Image Information
        id: image
        run: |
          HCLJSON="$(echo "jsonencode(local)" | packer console ../_packer/)"
          echo $HCLJSON | jq .
          echo "factory_subscription=$(echo $HCLJSON | jq --raw-output '.factory.subscription')" >> $GITHUB_OUTPUT
          echo "factory_region=$(echo $HCLJSON | jq --raw-output '.factory.region')" >> $GITHUB_OUTPUT
          echo "image_publisher=$(echo $HCLJSON | jq --raw-output '.image.publisher')" >> $GITHUB_OUTPUT
          echo "image_offer=$(echo $HCLJSON | jq --raw-output '.image.offer')" >> $GITHUB_OUTPUT
          echo "image_sku=$(echo $HCLJSON | jq --raw-output '.image.sku')" >> $GITHUB_OUTPUT
          echo "gallery_subscription=$(echo $HCLJSON | jq --raw-output '.image.gallery.subscription')" >> $GITHUB_OUTPUT
          echo "gallery_resourcegroup=$(echo $HCLJSON | jq --raw-output '.image.gallery.resourceGroup')" >> $GITHUB_OUTPUT
          echo "gallery_name=$(echo $HCLJSON | jq --raw-output '.image.gallery.name')" >> $GITHUB_OUTPUT
          echo "archive_subscription=$(echo $HCLJSON | jq --raw-output '.image.archive.subscription')" >> $GITHUB_OUTPUT
          echo "archive_resourcegroup=$(echo $HCLJSON | jq --raw-output '.image.archive.resourceGroup')" >> $GITHUB_OUTPUT
          echo "archive_name=$(echo $HCLJSON | jq --raw-output '.image.archive.name')" >> $GITHUB_OUTPUT
          echo "devcenter_subscription=$(echo $HCLJSON | jq --raw-output '.image.devCenter.subscription')" >> $GITHUB_OUTPUT
          echo "devcenter_resourcegroup=$(echo $HCLJSON | jq --raw-output '.image.devCenter.resourceGroup')" >> $GITHUB_OUTPUT
          echo "devcenter_name=$(echo $HCLJSON | jq --raw-output '.image.devCenter.name')" >> $GITHUB_OUTPUT          
          echo "devcenter_storage=$(echo $HCLJSON | jq --raw-output '.image.devCenter.storage')" >> $GITHUB_OUTPUT          
          echo "devcenter_compute=$(echo $HCLJSON | jq --raw-output '.image.devCenter.compute')" >> $GITHUB_OUTPUT          
          cat $GITHUB_OUTPUT | tee -a ${{ runner.temp }}/image.info

      - name: Ensure Image Definition
        uses: azure/CLI@v2
        with:
          inlineScript:	|
            az sig image-definition create \
              --subscription ${{ steps.image.outputs.gallery_subscription }} \
              --resource-group ${{ steps.image.outputs.gallery_resourcegroup }} \
              --gallery-name ${{ steps.image.outputs.gallery_name }} \
              --gallery-image-definition ${{ inputs.imageName }} \
              --publisher ${{ steps.image.outputs.image_publisher }} \
              --offer ${{ steps.image.outputs.image_offer }} \
              --sku ${{ steps.image.outputs.image_sku }} \
              --os-type Windows \
              --os-state Generalized \
              --hyper-v-generation V2 \
              --features 'IsHibernateSupported=true SecurityType=TrustedLaunch' \
              --only-show-errors 2>&1

      - name: Delete Image PreReleases
        continue-on-error: true
        uses: azure/CLI@v2
        with:
          inlineScript:	| 
            for IMAGEVERSION in $(az sig image-version list --subscription ${{ steps.image.outputs.gallery_subscription }} --resource-group ${{ steps.image.outputs.gallery_resourcegroup }} --gallery-name ${{ steps.image.outputs.gallery_name }} --gallery-image-definition ${{ inputs.imageName }} --query "[?publishingProfile.excludeFromLatest].id" --output tsv 2>/dev/null); do
              echo "Deleting image version '$IMAGEVERSION' ..." 
              az sig image-version delete --subscription ${{ steps.image.outputs.gallery_subscription }} --ids $IMAGEVERSION --output none &
            done; wait
              
      - name: Delete Packer ResourceGroups        
        uses: azure/CLI@v2
        with:
          inlineScript: |
            RGNAME_PREFIX=$(echo "PKR-${{ inputs.imageName }}" | tr [:lower:] [:upper:])
            RGNAME_SUFFIX=$(echo "-${{ github.workflow }}" | tr [:lower:] [:upper:])
            for RESOURCEGROUP in $(az group list --subscription ${{ steps.image.outputs.factory_subscription }} | jq --raw-output ".[] | select((.name | ascii_upcase | startswith(\"$RGNAME_PREFIX\")) and (.name | ascii_upcase | endswith(\"$RGNAME_SUFFIX\"))) | .name"); do
              echo "Deleting resource group '$RESOURCEGROUP' in subscription '${{ steps.image.outputs.factory_subscription }}' ..."
              az group delete --subscription ${{ steps.image.outputs.factory_subscription }} --resource-group $RESOURCEGROUP --force-deletion-types 'Microsoft.Compute/virtualMachines' --yes &
            done; wait
  
      - name: Delete Packer KeyVaults
        continue-on-error: true
        uses: azure/CLI@v2
        with:
          inlineScript:	| 
            RGNAME_PREFIX=$(echo "PKR-${{ inputs.imageName }}" | tr [:lower:] [:upper:])
            RGNAME_SUFFIX=$(echo "-${{ github.workflow }}" | tr [:lower:] [:upper:])
            # for KEYVAULT in $(az keyvault list-deleted --subscription ${{ steps.image.outputs.factory_subscription }} --resource-type vault --query "[?(starts_with(name, 'pkrkv'))].name" -o tsv 2>/dev/null); do
            for KEYVAULT in $(az keyvault list-deleted --subscription ${{ steps.image.outputs.factory_subscription }} | jq --raw-output ".[] | select((.properties.vaultId | ascii_upcase | contains(\"/resourceGroups/PKR-SITECORE\")) and (.properties.vaultId | ascii_upcase | contains(\"-FACTORY/providers/\"))).name"); do
              echo "Purging deleted key vault '$KEYVAULT' ..." 
              az keyvault purge --subscription ${{ steps.image.outputs.factory_subscription }} --name $KEYVAULT -o none & 
            done; wait  

      - name: Build Image
        id: packer
        run: |
          packer build -force -color=false -on-error=abort -timestamp-ui -var "imageSuffix=${{ github.workflow }}" -var "imageVersion=${{ inputs.imageVersion }}" ../_packer/ | tee ./image.log
          echo "gallery_imageid=$(tail -n 15 ./image.log | grep 'ManagedImageSharedImageGalleryId: ' | cut -d ' ' -f 2-)" >> $GITHUB_OUTPUT          
          cat $GITHUB_OUTPUT | tee -a ${{ runner.temp }}/image.info

      - name: Upload Image Info
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.imageName }}
          path: |
            ${{ runner.temp }}/image.info
            ${{ runner.temp }}/image.json

      - name: Create or Update DevBox Definition
        uses: azure/CLI@v2
        with:
          inlineScript:	|
            az extension add --name devcenter --upgrade --yes
            
            COMPUTEGALLERY_RESOURCEID=$(echo '${{ steps.packer.outputs.gallery_imageid }}' | cut -d '/' -f -9)
            DEVCENTERGALLERY_RESOURCEID=$(az devcenter admin gallery list --subscription ${{ steps.image.outputs.devcenter_subscription }} --resource-group ${{ steps.image.outputs.devcenter_resourcegroup }} --dev-center ${{ steps.image.outputs.devcenter_name }} | jq --raw-output ".[] | select(.galleryResourceId == \"$COMPUTEGALLERY_RESOURCEID\") | .id")
            DEVCENTERGALLERY_IMAGEID="$DEVCENTERGALLERY_RESOURCEID/$(echo '${{ steps.packer.outputs.gallery_imageid }}' | cut -d '/' -f 10-)"
            DEVCENTERGALLERY_IMAGENAME="${{ inputs.imageName }}-PRE"
            
            while [ "Accepted" == "$(az devcenter admin devbox-definition show --subscription ${{ steps.image.outputs.devcenter_subscription }} --resource-group ${{ steps.image.outputs.devcenter_resourcegroup }} --dev-center ${{ steps.image.outputs.devcenter_name }} --devbox-definition-name "$DEVCENTERGALLERY_IMAGENAME" --query provisioningState --output tsv 2> /dev/null)" ]; do
              echo "DevBox definition '$DEVCENTERGALLERY_IMAGENAME' is in a pending state and can't be created or updated - retry in 60 sec"; sleep 60 
            done 

            az devcenter admin devbox-definition create \
              --devbox-definition-name "$DEVCENTERGALLERY_IMAGENAME" \
              --subscription ${{ steps.image.outputs.devcenter_subscription }} \
              --resource-group ${{ steps.image.outputs.devcenter_resourcegroup }} \
              --dev-center ${{ steps.image.outputs.devcenter_name }} \
              --image-reference id="$DEVCENTERGALLERY_IMAGEID" \
              --os-storage-type ${{ steps.image.outputs.devcenter_storage }} \
              --sku name="${{ steps.image.outputs.devcenter_compute }}" \
              --only-show-errors 2>&1

  release:
    needs: build
    runs-on: ubuntu-latest    
    environment: Production

    defaults:
      run:
        shell: bash
        working-directory: ${{ format('./{0}', inputs.imageName) }}
    
    outputs:
      archive: ${{ steps.image.outputs.archive_subscription != '' && steps.image.outputs.archive_resourcegroup != '' }}

    steps:

      - name: Download Image Info
        uses: actions/download-artifact@v4

      - name: Load Image Info
        id: image
        run: cat ./image.info >> $GITHUB_OUTPUT && cat $GITHUB_OUTPUT

      - uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
  
      - name: Promote Image to Latest
        uses: azure/CLI@v2
        with:
          inlineScript:	|
            az sig image-version update \
              --subscription ${{ steps.image.outputs.gallery_subscription }} \
              --resource-group ${{ steps.image.outputs.gallery_resourcegroup }} \
              --gallery-name ${{ steps.image.outputs.gallery_name }} \
              --gallery-image-definition ${{ inputs.imageName }} \
              --gallery-image-version ${{ inputs.imageVersion }} \
              --set publishingProfile.excludeFromLatest=false \
              --only-show-errors 2>&1

      - name: Determine Image Reference ID & Type
        id: reference
        uses: azure/CLI@v2
        with:
          inlineScript:	|
            az extension add --name devcenter --upgrade --yes
            COMPUTEGALLERY_RESOURCEID=$(echo '${{ steps.image.outputs.gallery_imageid }}' | cut -d '/' -f -9)
            DEVCENTERGALLERY_RESOURCEID=$(az devcenter admin gallery list --subscription ${{ steps.image.outputs.devcenter_subscription }} --resource-group ${{ steps.image.outputs.devcenter_resourcegroup }} --dev-center ${{ steps.image.outputs.devcenter_name }} | jq --raw-output ".[] | select(.galleryResourceId == \"$COMPUTEGALLERY_RESOURCEID\") | .id")
            echo "referenceId_version=$DEVCENTERGALLERY_RESOURCEID/$(echo '${{ steps.image.outputs.gallery_imageid }}' | cut -d '/' -f 10-)" >> $GITHUB_OUTPUT
            echo "referenceId_latest=$DEVCENTERGALLERY_RESOURCEID/$(echo '${{ steps.image.outputs.gallery_imageid }}' | cut -d '/' -f 10- | cut -d '/' -f -2)" >> $GITHUB_OUTPUT
            echo "referenceVersion=$(az devcenter admin devbox-definition show \          
              --dev-box-definition-name "${{ inputs.imageName }}" \
              --subscription ${{ steps.image.outputs.devcenter_subscription }} \
              --resource-group ${{ steps.image.outputs.devcenter_resourcegroup }} \
              --dev-center ${{ steps.image.outputs.devcenter_name }} \
              --query "contains(imageReference.id, '/versions/')" 2> /dev/null || echo 'false')" >> $GITHUB_OUTPUT
            cat $GITHUB_OUTPUT

      - name: Create or Update DevBox Definition
        uses: azure/CLI@v2
        with:
          inlineScript:	|
            az extension add --name devcenter --upgrade --yes

            while [ "Accepted" == "$(az devcenter admin devbox-definition show --subscription ${{ steps.image.outputs.devcenter_subscription }} --resource-group ${{ steps.image.outputs.devcenter_resourcegroup }} --dev-center ${{ steps.image.outputs.devcenter_name }} --devbox-definition-name "${{ inputs.imageName }}" --query provisioningState --output tsv 2> /dev/null)" ]; do
              echo "DevBox definition '${{ inputs.imageName }}' is in a pending state and can't be created or updated - retry in 60 sec"; sleep 60 
            done 

            while true; do
              sleep 60 && az devcenter admin devbox-definition create \
                --devbox-definition-name "${{ inputs.imageName }}" \
                --subscription ${{ steps.image.outputs.devcenter_subscription }} \
                --resource-group ${{ steps.image.outputs.devcenter_resourcegroup }} \
                --dev-center ${{ steps.image.outputs.devcenter_name }} \
                --image-reference id="${{ steps.reference.outputs.referenceVersion == 'true' && steps.reference.outputs.referenceId_version || steps.reference.outputs.referenceId_latest }}" \
                --os-storage-type ${{ steps.image.outputs.devcenter_storage }} \
                --sku name="${{ steps.image.outputs.devcenter_compute }}" \
                --only-show-errors && break || echo "DevBox definition '${{ inputs.imageName }}' can't be created or updated because of a pending gallery update - retry in 60 sec"
            done 

  archive:
    needs: release
    runs-on: ubuntu-latest    
    if: ${{ needs.release.outputs.archive }}

    defaults:
      run:
        shell: bash
        working-directory: ${{ format('./{0}', inputs.imageName) }}

    steps:

      - name: Install Tools
        run: sudo apt-get install uuid-runtime -y 

      - name: Download Image Info
        uses: actions/download-artifact@v4

      - name: Load Image Info
        id: image
        run: cat ./image.info >> $GITHUB_OUTPUT && cat $GITHUB_OUTPUT

      - uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
                    
      - name: Create Archive Disk
        id: archiveDisk
        uses: azure/CLI@v2
        with:
          inlineScript: |
            DISK_NAME=$(uuidgen --md5 --namespace $(az account show --query tenantId --output tsv) --name ${{ steps.image.outputs.gallery_imageid }})
            DISK_LOCATION=$(az sig show --subscription ${{ steps.image.outputs.gallery_subscription }} --resource-group ${{ steps.image.outputs.gallery_resourcegroup }} --gallery-name ${{ steps.image.outputs.gallery_name }} --query location --output tsv)
            
            echo "resourceId=$(az disk create \
              --subscription ${{ steps.image.outputs.gallery_subscription }} \
              --resource-group ${{ steps.image.outputs.gallery_resourcegroup }} \
              --location $DISK_LOCATION \
              --name $DISK_NAME \
              --gallery-image-reference ${{ steps.image.outputs.gallery_imageid }} \
              --security-type TrustedLaunch \
              --hyper-v-generation v2 \
              --query id \
              --output tsv)" >> $GITHUB_OUTPUT
            
            echo "resourceUrl=$(az disk grant-access \
              --subscription ${{ steps.image.outputs.gallery_subscription }} \
              --resource-group ${{ steps.image.outputs.gallery_resourcegroup }} \
              --name $DISK_NAME \
              --duration-in-seconds 3600 \
              --access-level read \
              --query accessSas \
              --output tsv)" >> $GITHUB_OUTPUT
            
              cat $GITHUB_OUTPUT

      - name: Upload Archive Disk
        uses: azure/CLI@v2
        with:
          inlineScript: |
            GALLERY_ID=$(az sig show --subscription ${{ steps.image.outputs.gallery_subscription }} --resource-group ${{ steps.image.outputs.gallery_resourcegroup }} --gallery-name ${{ steps.image.outputs.gallery_name }} --query id --output tsv)
            ARCHIVE_NAME=$([ -z "${{ steps.image.outputs.archive_name }}" ] && (echo "archive$(uuidgen --md5 --namespace $(az account show --query tenantId --output tsv) --name $GALLERY_ID | tr -d '-')" | cut -c -24) || echo "${{ steps.image.outputs.archive_name }}" )
            ARCHIVE_LOCATION=$(az sig show --subscription ${{ steps.image.outputs.gallery_subscription }} --resource-group ${{ steps.image.outputs.gallery_resourcegroup }} --gallery-name ${{ steps.image.outputs.gallery_name }} --query location --output tsv)
            
            if [ -z "$(az storage account show --subscription ${{ steps.image.outputs.archive_subscription }} --resource-group ${{ steps.image.outputs.archive_resourcegroup }} --name $ARCHIVE_NAME --query id --output tsv 2> /dev/null)" ]; then
              az storage account create \
                --subscription ${{ steps.image.outputs.archive_subscription }} \
                --resource-group ${{ steps.image.outputs.archive_resourcegroup }} \
                --name $ARCHIVE_NAME \
                --location $ARCHIVE_LOCATION \
                --kind StorageV2 \
                --sku Standard_LRS
            fi
            
            CONTAINER_NAME=$(echo "${{ inputs.imageName }}" | tr '[:upper:]' '[:lower:]')
            
            if [ "$(az storage container exists --subscription ${{ steps.image.outputs.archive_subscription }} --account-name $ARCHIVE_NAME --name $CONTAINER_NAME --auth-mode login --query exists --output tsv)" == "false" ]; then
              az storage container create \
                --subscription ${{ steps.image.outputs.archive_subscription }} \
                --account-name $ARCHIVE_NAME \
                --name $CONTAINER_NAME \
                --auth-mode login \
                --output none
            fi
            
            CONTAINER_SAS=$(az storage container generate-sas --subscription ${{ steps.image.outputs.archive_subscription }} --account-name $ARCHIVE_NAME --name $CONTAINER_NAME --as-user --auth-mode login --permissions acw --expiry $(date -d '+1 hour' +"%Y-%m-%dT%H:%MZ") --output tsv)
            CONTAINER_URL="$(az storage account show --subscription ${{ steps.image.outputs.archive_subscription }} --resource-group ${{ steps.image.outputs.archive_resourcegroup }} --name $ARCHIVE_NAME --query id --output tsv)$CONTAINER_NAME/${{ inputs.imageName }}-${{ inputs.imageVersion }}.vhd?$CONTAINER_SAS"
            
            azcopy copy "${{ steps.archiveDisk.outputs.resourceUrl }}" "$CONTAINER_URL" --blob-type PageBlob

      - name: Delete Archive Disk
        uses: azure/CLI@v2
        with:
          inlineScript: |
            az disk delete --ids ${{ steps.archiveDisk.outputs.resourceId }} --no-wait --yes
